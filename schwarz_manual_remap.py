import shutil
from distutils.dir_util import copy_tree
from pathlib import Path

import helpers as hlp
import remapping as rmp

exp_id = "SWZ7"
dt_cpl = 7200
dt_ifs = 900
dt_nemo = 1800
cpl_scheme = 0


def generate_experiments(
    exp_id: str, dt_cpl: int, dt_ifs: int, dt_nemo: int, cpl_scheme: int
):
    exp_setups = []
    dct = {
        "exp_id": exp_id,
        "dt_cpl": dt_cpl,
        "dt_nemo": dt_nemo,
        "dt_ifs": dt_ifs,
        "cpl_scheme": cpl_scheme,
    }
    exp_setups.append(dct)
    dct = dct.copy()
    dct["script_name"] = "ece-scm_oifs+nemo_2"
    exp_setups.append(dct)
    return exp_setups


experiments = generate_experiments(exp_id, dt_cpl, dt_ifs, dt_nemo, cpl_scheme)
print(experiments)
config_template = hlp.get_template("config-run.xml.j2")
dst_folder = "../aoscm/runtime/scm-classic/PAPA"

print("Iteration 1")
experiment = experiments[0]
with hlp.ChangeDirectory(dst_folder):
    with open(f"./config-run.xml", "w") as config_out:
        config_out.write(
            config_template.render(
                setup_dict=experiment,
            )
        )
hlp.run_model()

print("Preparing iteration 2")

# Rename run directory
run_dir = Path(f"PAPA/{exp_id}")
old_run_dir = run_dir.rename(run_dir.parent / f"{exp_id}_1")

# Create input files by copying EXPOUT files and renaming appropriately
input_files = []
for path in old_run_dir.glob("*.nc"):
    if "_ATMIFS_" in path.stem:
        atm_var_name = path.stem.split("_ATMIFS_")[0]
        copied_file = path.parent / f"{atm_var_name}.nc"
        shutil.copy(path, copied_file)
        input_files.append(copied_file)
    if "_oceanx_" in path.stem:
        oce_var_name = path.stem.split("_oceanx_")[0]
        copied_file = path.parent / f"{oce_var_name}.nc"
        shutil.copy(path, copied_file)
        input_files.append(copied_file)

run_dir.mkdir()

for path in input_files:
    path.rename(run_dir / path.name)

print("Renamed EXPOUT files generated by OASIS")

print("Iteration 2")
experiment = experiments[1]
with hlp.ChangeDirectory(dst_folder):
    with open(f"./config-run.xml", "w") as config_out:
        config_out.write(
            config_template.render(
                setup_dict=experiment,
            )
        )
hlp.run_model(executable=f"./{experiment['script_name']}.sh")

iter = 3
Niter = 5

for iter in range(iter, Niter + 1):
    print(f"Preparing iteration {iter}")

    # Rename run directory
    old_run_dir = run_dir.rename(run_dir.parent / f"{exp_id}_{iter-1}")
    print("Run directory copied")

    # remap OUTPUT files generated by OASIS
    input_files = []
    for path in old_run_dir.glob("*.nc"):
        if "_ATMIFS_" in path.stem:
            atm_var_name = path.stem.split("_ATMIFS_")[0]
            oce_var_name = rmp.atm_to_oce[atm_var_name]
            oce_file_path = path.parent / f"{oce_var_name}.nc"
            rmp.remap_atm_to_oce(str(path), atm_var_name, oce_file_path, oce_var_name)
            input_files.append(oce_file_path)
        if "_oceanx_" in path.stem:
            oce_var_name = path.stem.split("_oceanx_")[0]
            atm_var_name = rmp.oce_to_atm[oce_var_name]
            atm_file_path = path.parent / f"{atm_var_name}.nc"
            rmp.remap_oce_to_atm(str(path), oce_var_name, atm_file_path, atm_var_name)
            input_files.append(atm_file_path)

    run_dir.mkdir()

    for path in input_files:
        path.rename(run_dir / path.name)

    print("Remapped OUTPUT files generated by OASIS")

    print(f"Iteration {iter}")
    experiment = experiments[1]
    with hlp.ChangeDirectory(dst_folder):
        with open(f"./config-run.xml", "w") as config_out:
            config_out.write(
                config_template.render(
                    setup_dict=experiment,
                )
            )
    hlp.run_model(executable=f"./{experiment['script_name']}.sh")
